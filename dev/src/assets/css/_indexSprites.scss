/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$img4Name: 'img4';
$img4X: 0px;
$img4Y: 0px;
$img4OffsetX: 0px;
$img4OffsetY: 0px;
$img4Width: 400px;
$img4Height: 630px;
$img4TotalWidth: 1606px;
$img4TotalHeight: 630px;
$img4Image: '../img/sprites.png';
$img4: (0px, 0px, 0px, 0px, 400px, 630px, 1606px, 630px, '../img/sprites.png', 'img4', );
$img5Name: 'img5';
$img5X: 402px;
$img5Y: 0px;
$img5OffsetX: -402px;
$img5OffsetY: 0px;
$img5Width: 400px;
$img5Height: 630px;
$img5TotalWidth: 1606px;
$img5TotalHeight: 630px;
$img5Image: '../img/sprites.png';
$img5: (402px, 0px, -402px, 0px, 400px, 630px, 1606px, 630px, '../img/sprites.png', 'img5', );
$img6Name: 'img6';
$img6X: 804px;
$img6Y: 0px;
$img6OffsetX: -804px;
$img6OffsetY: 0px;
$img6Width: 400px;
$img6Height: 630px;
$img6TotalWidth: 1606px;
$img6TotalHeight: 630px;
$img6Image: '../img/sprites.png';
$img6: (804px, 0px, -804px, 0px, 400px, 630px, 1606px, 630px, '../img/sprites.png', 'img6', );
$img6Name: 'img6のコピー';
$img6X: 1206px;
$img6Y: 0px;
$img6OffsetX: -1206px;
$img6OffsetY: 0px;
$img6Width: 400px;
$img6Height: 630px;
$img6TotalWidth: 1606px;
$img6TotalHeight: 630px;
$img6Image: '../img/sprites.png';
$img6: (1206px, 0px, -1206px, 0px, 400px, 630px, 1606px, 630px, '../img/sprites.png', 'img6のコピー', );
$spritesheetWidth: 1606px;
$spritesheetHeight: 630px;
$spritesheetImage: '../img/sprites.png';
$spritesheetSprites: ($img4, $img5, $img6, $img6, );
$spritesheet: (1606px, 630px, '../img/sprites.png', $spritesheetSprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
